from ifmap_global import CamelCase
from ifmap_model import IFMapIdentifier, IFMapProperty, IFMapLink, IFMapLinkAttr
from TypeGenerator import TypeGenerator

import pprint
import re
import os
import time

from common import write
from common import _BASE_URL, _BASE_PARENT, _BASE_PARENT_IMID


class GenerateServerImplMixin(object):

    def _generate_server_impl(self, gen_fname, gen_type_pfx):
        gen_file = self._xsd_parser.makeFile(gen_fname)
        write(gen_file, "")
        write(gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(gen_file, "")
        write(gen_file, "from bottle import abort, request, response")
        write(gen_file, "")
        write(gen_file, "import gevent")
        write(gen_file, "import json")
        write(gen_file, "import uuid")
        write(gen_file, "from pprint import pformat")
        write(gen_file, "")
        write(gen_file, "import cfgm_common")
        write(gen_file, "from cfgm_common.rest import LinkObject, hdr_server_tenant")
        write(gen_file, "from cfgm_common.exceptions import *")
        write(gen_file, "from %s_xsd import *" %(gen_type_pfx))
        write(gen_file, "from %s_common import *" %(gen_type_pfx))
        write(gen_file, "from %s_server import *" %(gen_type_pfx))
        write(gen_file, "from vnc_perms import VncRequestContext")
        write(gen_file, "import cStringIO")
        write(gen_file, "from lxml import etree")
        write(gen_file, "")
        write(gen_file, "all_resource_types = set([")
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            write(gen_file, "    '%s'," %(ident_name))
        write(gen_file, "    ])")

        # Grab idents for which collection link has to be advertised
        collection_idents = [ident for ident in self._non_exclude_idents()
                                       if ident.getName() != _BASE_PARENT]
        class_name = CamelCase(os.path.basename(gen_fname.split('.py')[0]))
        mixin_class_name = class_name + 'Mixin'
        write(gen_file, "")
        write(gen_file, "")

        #
        # Mixin class
        #
        write(gen_file, "class %s(object):" %(mixin_class_name))
        write(gen_file, "")
        write(gen_file, "    def __init__(self):")
        write(gen_file, "")
        write(gen_file, "        super(%s, self).__init__()" %(mixin_class_name))
        write(gen_file, "")
        write(gen_file, "        self._resource_classes = {}")
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            camel_name = CamelCase(ident_name)
            write(gen_file, "        self._resource_classes['%s'] = %sServerGen" %(ident_name, camel_name))
        write(gen_file, "")
 
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            parents = ident.getParents()

            method_name = ident.getName().replace('-', '_')
            camel_name = CamelCase(ident.getName())

            child_idents = []
            back_idents = []

            for link_info in ident.getLinksInfo():
                if not ident.isLinkHas(link_info):
                    continue
                child_ident = ident.getLinkTo(link_info)
                child_idents.append((child_ident, link_info))

            for back_link_info in ident.getBackLinksInfo():
                if not ident.isLinkRef(back_link_info):
                    continue
                back_ident = ident.getBackLinkFrom(back_link_info)
                back_idents.append((back_ident, back_link_info))

            self._generate_db_post(gen_file, method_name, ident)
            self._generate_db_put(gen_file, method_name, ident)
            self._generate_db_delete(gen_file, method_name, ident, child_idents, back_idents)

        write(gen_file, "#end class %s" %(mixin_class_name))
        write(gen_file, "")

        #
        # VNC SERVER
        #
        write(gen_file, "class %s(object):" %(class_name))
        write(gen_file, "    def __new__(cls, *args, **kwargs):")
        write(gen_file, "        obj = super(%s, cls).__new__(cls, *args, **kwargs)" \
                                             %(class_name))
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            if ident_name == _BASE_PARENT:
                continue
            method_name = ident_name.replace('-', '_')
            write(gen_file, "        # leaf resource")
            write(gen_file, "        obj.route('%s/%s/<id>', 'GET', obj.%s_http_get)" \
                                                   %(_BASE_URL, ident_name, method_name))
            write(gen_file, "        obj.route('%s/%s/<id>', 'PUT', obj.%s_http_put)" \
                                                   %(_BASE_URL, ident_name, method_name))
            write(gen_file, "        obj.route('%s/%s/<id>', 'DELETE', obj.%s_http_delete)" \
                                                   %(_BASE_URL, ident_name, method_name))
            write(gen_file, "        # collections")
            write(gen_file, "        obj.route('%s/%ss', 'POST', obj.%ss_http_post)" \
                                                   %(_BASE_URL, ident_name, method_name))
            write(gen_file, "        obj.route('%s/%ss', 'GET', obj.%ss_http_get)" \
                                                   %(_BASE_URL, ident_name, method_name))
        write(gen_file, "        return obj")
        write(gen_file, "    #end __new__")
        write(gen_file, "")
        write(gen_file, "    def __init__(self):")
        write(gen_file, "        self._db_conn = None")
        write(gen_file, "        self._get_common = None")
        write(gen_file, "        self._post_common = None")
        write(gen_file, "")
        write(gen_file, "        # Generate LinkObjects for all entities")
        write(gen_file, "        links = []")
        write(gen_file, "        # Link for root")
        write(gen_file, "        links.append(LinkObject('root', self._base_url , '/%s'," %(_BASE_PARENT))
        write(gen_file, "                                '%s'))" %(_BASE_PARENT))
        write(gen_file, "")
        write(gen_file, "        # Link for collections")
        for ident in collection_idents:
            ident_name = ident.getName()
            write(gen_file, "        link = LinkObject('collection',")
            write(gen_file, "                       self._base_url , '/%ss'," %(ident_name))
            write(gen_file, "                       '%s')" %(ident_name))
            write(gen_file, "        links.append(link)")
            write(gen_file, "")

        write(gen_file, "        # Link for Resources Base")
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            write(gen_file, "        link = LinkObject('resource-base',")
            write(gen_file, "                       self._base_url , '/%s'," %(ident_name))
            write(gen_file, "                       '%s')" %(ident_name))
            write(gen_file, "        links.append(link)")

        write(gen_file, "        self._homepage_links = links")
        write(gen_file, "    #end __init__")
        write(gen_file, "")

        # context helper methods
        write(gen_file, "    def is_admin_request(self):")
        write(gen_file, "        env = request.headers.environ")
        write(gen_file, "        for field in ('HTTP_X_API_ROLE', 'HTTP_X_ROLE'):")
        write(gen_file, "            if field in env:")
        write(gen_file, "                roles = env[field].split(',')")
        write(gen_file, "                return 'admin' in [x.lower() for x in roles]")
        write(gen_file, "        return False")
        write(gen_file, "")

        # meta methods
        self._generate_meta_http_get(gen_file)

        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            parents = ident.getParents()

            method_name = ident.getName().replace('-', '_')
            camel_name = CamelCase(ident.getName())

            child_idents = []
            back_idents = []

            for link_info in ident.getLinksInfo():
                if not ident.isLinkHas(link_info):
                    continue
                child_ident = ident.getLinkTo(link_info)
                child_idents.append((child_ident, link_info))

            for back_link_info in ident.getBackLinksInfo():
                if not ident.isLinkRef(back_link_info):
                    continue
                back_ident = ident.getBackLinkFrom(back_link_info)
                back_idents.append((back_ident, back_link_info))

            self._generate_http_get(gen_file, method_name, ident)
            self._generate_http_post(gen_file, method_name, ident)
            self._generate_http_put(gen_file, method_name, ident)
            self._generate_http_delete(gen_file, method_name, ident)

            # GET on collection
            write(gen_file, "    def %ss_http_get(self):" %(method_name))
            write(gen_file, "        # gather list of uuids using 1. any specified anchors")
            write(gen_file, "        #                            2. any specified filters")
            write(gen_file, "        # if not 'detail' return list with any specified 'fields'")
            write(gen_file, "        # if 'detail' return list with props+refs + any specified 'fields'")
            write(gen_file, "")
            write(gen_file, "        env = request.headers.environ")
            write(gen_file, "        tenant_name = env.get(hdr_server_tenant(), 'default-project')")
            write(gen_file, "        parent_uuids = None")
            write(gen_file, "        back_ref_uuids = None")
            write(gen_file, "        obj_uuids = None")
            write(gen_file, "        if (('parent_fq_name_str' in request.query) and")
            write(gen_file, "            ('parent_type' in request.query)):")
            write(gen_file, "            parent_fq_name = request.query.parent_fq_name_str.split(':')")
            write(gen_file, "            parent_type = request.query.parent_type")
            write(gen_file, "            parent_uuids = [self._db_conn.fq_name_to_uuid(parent_type, parent_fq_name)]")
            write(gen_file, "        elif 'parent_id' in request.query:")
            write(gen_file, "            parent_ids = request.query.parent_id.split(',')")
            write(gen_file, "            parent_uuids = [str(uuid.UUID(p_uuid)) for p_uuid in parent_ids]")
            write(gen_file, "        if 'back_ref_id' in request.query:")
            write(gen_file, "            back_ref_ids = request.query.back_ref_id.split(',')")
            write(gen_file, "            back_ref_uuids = [str(uuid.UUID(b_uuid)) for b_uuid in back_ref_ids]")
            write(gen_file, "        if 'obj_uuids' in request.query:")
            write(gen_file, "            obj_uuids = request.query.obj_uuids.split(',')")
            write(gen_file, "")
            write(gen_file, "        # common handling for all resource get")
            write(gen_file, "        (ok, result) = self._get_common(request, parent_uuids)")
            write(gen_file, "        if not ok:")
            write(gen_file, "            (code, msg) = result")
            write(gen_file, "            self.config_object_error(None, None, '%ss', 'http_get_collection', msg)" % (method_name))
            write(gen_file, "            abort(code, msg)")
            write(gen_file, "")
            write(gen_file, "        if 'count' in request.query:")
            write(gen_file, "            count = 'true' in request.query.count.lower()")
            write(gen_file, "        else:")
            write(gen_file, "            count = False")
            write(gen_file, "")
            write(gen_file, "        filter_params = request.query.filters")
            write(gen_file, "        if filter_params:")
            write(gen_file, "            try:")
            write(gen_file, "                ff_key_vals = filter_params.split(',')")
            write(gen_file, "                ff_names = [ff.split('==')[0] for ff in ff_key_vals]")
            write(gen_file, "                ff_values = [ff.split('==')[1] for ff in ff_key_vals]")
            write(gen_file, "                filters = {'field_names': ff_names, 'field_values': ff_values}")
            write(gen_file, "            except Exception as e:")
            write(gen_file, "                abort(400, 'Invalid filter ' + filter_params)")
            write(gen_file, "        else:")
            write(gen_file, "            filters = None")
            write(gen_file, "        db_conn = self._db_conn")
            write(gen_file, "        (ok, result) = \\")
            write(gen_file, "             db_conn.dbe_list('%s', parent_uuids, back_ref_uuids, obj_uuids, count, filters)" %(ident_name))
            write(gen_file, "        if not ok:")
            write(gen_file, "            self.config_object_error(None, None, '%ss', 'http_get_collection', result)" % (method_name))
            write(gen_file, "            abort(404, result)")
            write(gen_file, "")
            write(gen_file, "        # If only counting, return early")
            write(gen_file, "        if count:")
            write(gen_file, "            return {'%ss': {'count': result}}" %(ident_name))
            write(gen_file, "")
            write(gen_file, "        if 'detail' in request.query:")
            write(gen_file, "            detail = 'true' in request.query.detail.lower()")
            write(gen_file, "        else:")
            write(gen_file, "            detail = False")
            write(gen_file, "")
            write(gen_file, "        fq_names_uuids = result")
            write(gen_file, "        obj_dicts = []")
            write(gen_file, "        if not detail:")
            write(gen_file, "            if not self.is_admin_request():")
            write(gen_file, "                obj_ids_list = [{'uuid': obj_uuid} for _, obj_uuid in fq_names_uuids]")
            write(gen_file, "                obj_fields = [u'id_perms']")
            write(gen_file, "                (ok, result) = db_conn.dbe_read_multi('%s', obj_ids_list, obj_fields)" % (ident_name))
            write(gen_file, "                if not ok:")
            write(gen_file, "                    result = []")
            write(gen_file, "                for obj_result in result:")
            write(gen_file, "                    # give chance for zk heartbeat/ping")
            write(gen_file, "                    gevent.sleep(0)")
            write(gen_file, "                    if obj_result['id_perms'].get('user_visible', True):")
            write(gen_file, "                        obj_dict = {}")
            write(gen_file, "                        obj_dict['uuid'] = obj_result['uuid']")
            write(gen_file, "                        obj_dict['href'] = self.generate_url('%s', obj_result['uuid'])" % (ident_name))
            write(gen_file, "                        obj_dict['fq_name'] = obj_result['fq_name']")
            write(gen_file, "                        obj_dicts.append(obj_dict)")
            write(gen_file, "            else:")
            write(gen_file, "                for fq_name, obj_uuid in fq_names_uuids:")
            write(gen_file, "                    # give chance for zk heartbeat/ping")
            write(gen_file, "                    gevent.sleep(0)")
            write(gen_file, "                    obj_dict = {}")
            write(gen_file, "                    obj_dict['uuid'] = obj_uuid")
            write(gen_file, "                    obj_dict['href'] = self.generate_url('%s', obj_uuid)" %(ident_name))
            write(gen_file, "                    obj_dict['fq_name'] = fq_name")
            write(gen_file, "                    obj_dicts.append(obj_dict)")
            write(gen_file, "        else: #detail")
            write(gen_file, "            obj_ids_list = [{'uuid': obj_uuid} for _, obj_uuid in fq_names_uuids]")
            prop_fields = [prop.getName().replace('-', '_') for prop in ident.getProperties()]
            ref_fields = ['%s_refs' %(ref_ident.getName().replace('-', '_')) for ref_ident in ident.getReferences()]
            write(gen_file, "            obj_fields = %s + %s" %(prop_fields, ref_fields))
            write(gen_file, "            if 'fields' in request.query:")
            write(gen_file, "                obj_fields.extend(request.query.fields.split(','))")

            write(gen_file, "            (ok, result) = db_conn.dbe_read_multi('%s', obj_ids_list, obj_fields)" \
                                                                                %(ident_name))
            write(gen_file, "")
            write(gen_file, "            if not ok:")
            write(gen_file, "                result = []")
            write(gen_file, "")
            write(gen_file, "            for obj_result in result:")
            write(gen_file, "                # give chance for zk heartbeat/ping")
            write(gen_file, "                gevent.sleep(0)")
            write(gen_file, "                obj_dict = {}")
            write(gen_file, "                obj_dict['name'] = obj_result['fq_name'][-1]")
            write(gen_file, "                obj_dict['href'] = self.generate_url('%s', obj_result['uuid'])" %(ident_name))
            write(gen_file, "                obj_dict.update(obj_result)")
            write(gen_file, "                if (obj_dict['id_perms'].get('user_visible', True) or ")
            write(gen_file, "                    self.is_admin_request()):")
            write(gen_file, "                    obj_dicts.append({'%s': obj_dict})" %(ident_name))
            write(gen_file, "")
            write(gen_file, "        return {'%ss': obj_dicts} " %(ident_name))
            write(gen_file, "    #end %ss_http_get" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def _%s_create_default_children(self, parent_obj):" %(method_name))
            for link_info in ident.getLinksInfo():
                if not ident.isLinkHas(link_info):
                    continue
                if ident.isLinkDerived(link_info):
                    # don't create default if user is never going to directly
                    # manipulate this object
                    continue
                child_ident = ident.getLinkTo(link_info)
                child_name = child_ident.getName()
                child_method = child_name.replace('-', '_')
                child_camel = CamelCase(child_name)
                write(gen_file, "        # Create a default child only if provisioned for")
                write(gen_file, "        r_class = self.get_resource_class('%s')" %(child_name))
                write(gen_file, "        if r_class and r_class.generate_default_instance:")
                write(gen_file, "            child_obj = %s(parent_obj = parent_obj)" %(child_camel))
                write(gen_file, "            child_dict = child_obj.__dict__")
                write(gen_file, "            fq_name = child_dict['fq_name']")
                write(gen_file, "            child_dict['id_perms'] = self._get_default_id_perms('%s')" %(child_name))
                write(gen_file, "")
                write(gen_file, "            db_conn = self._db_conn")
                write(gen_file, "            (ok, result) = db_conn.dbe_alloc('%s', child_dict)" %(child_name))
                write(gen_file, "            if not ok:")
                write(gen_file, "                return (ok, result)")
                write(gen_file, "")
                write(gen_file, "            obj_ids = result")
                write(gen_file, "            db_conn.dbe_create('%s', obj_ids, child_dict)" %(child_name))
                write(gen_file, "            self._%s_create_default_children(child_obj)" %(child_method))
                write(gen_file, "")
            write(gen_file, "        pass")
            write(gen_file, "    #end _%s_create_default_children" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def _%s_delete_default_children(self, parent_dict):" %(method_name))
            for (child_ident, child_link_info) in child_idents:
                child_method = child_ident.getName().replace('-', '_')
                child_default_name = child_ident.getDefaultFQName(parent_type = ident_name)[-1]
                write(gen_file, "        # Delete a default child only if provisioned for")
                write(gen_file, "        r_class = self.get_resource_class('%s')" %(child_name))
                write(gen_file, "        if r_class and r_class.generate_default_instance:")
                write(gen_file, "            # first locate default child then delete it")
                write(gen_file, "            has_infos = parent_dict.get('%ss')" %(child_method))
                write(gen_file, "            if has_infos:")
                write(gen_file, "                for has_info in has_infos:")
                write(gen_file, "                    if has_info['to'][-1] == '%s':" %(child_default_name))
                write(gen_file, "                        default_child_id = has_info['href'].split('/')[-1]")
                write(gen_file, "                        self.%s_http_delete(default_child_id)" %(child_method))
                write(gen_file, "                        break")
                write(gen_file, "")
            write(gen_file, "        pass")
            write(gen_file, "    #end _%s_delete_default_children" %(method_name))
            write(gen_file, "")

        write(gen_file, "#end class %s" %(class_name))
        write(gen_file, "")

        write(gen_file, "class DefaultsGen(object):")
        write(gen_file, "    def __init__(self):")
        write(gen_file, "        self.perms = {}")
        write(gen_file, "        default_perms = self._common_default_perms")
        write(gen_file, "        id_perms = IdPermsType(default_perms, None, True, 0, 0)")
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            write(gen_file, "        self.perms['%s'] = id_perms" %(ident_name))
        write(gen_file, "")
        write(gen_file, "        self.resource = {}")
        #for ident in self._non_exclude_idents():
        #    ident_name = ident.getName()
        #    class_name = CamelCase(ident_name)
        #    write(gen_file, "        self.resource['%s'] = %s()" \
        #                                            %(ident_name, class_name))
        write(gen_file, "")
        write(gen_file, "    #end __init__")
        write(gen_file, "#end class DefaultsGen")

    def _generate_meta_http_get(self, gen_file):
        write(gen_file, "    def _meta_http_get(self, id, method_name, ident_name, properties, references, back_references, children):")
        write(gen_file, "        print 'REFACTO %s'" % time.time())
        write(gen_file, "        try:")
        write(gen_file, "            self._extension_mgrs['resourceApi'].map_method('pre_%s_read' % method_name, id)")
        write(gen_file, "        except Exception as e:")
        write(gen_file, "            pass")
        write(gen_file, "")
        write(gen_file, "        # TODO get vals from request out of the global ASAP")
        write(gen_file, "        etag = request.headers.get('If-None-Match')")
        write(gen_file, "        try:")
        write(gen_file, "            obj_type = self._db_conn.uuid_to_obj_type(id)")
        write(gen_file, "        except NoIdError:")
        write(gen_file, "            obj_type = None")
        write(gen_file, "        if obj_type != method_name:")
        write(gen_file, "            abort(404, 'No %s object found for id %s' % (ident_name, id))")
        write(gen_file, "        # common handling for all resource get")
        write(gen_file, "        (ok, result) = self._get_common(request, id)")
        write(gen_file, "        if not ok:")
        write(gen_file, "            (code, msg) = result")
        write(gen_file, "            self.config_object_error(id, None, method_name, 'http_get', msg)")
        write(gen_file, "            abort(code, msg)")
        write(gen_file, "")
        write(gen_file, "        # type-specific hook")
        write(gen_file, "        r_class = self.get_resource_class(ident_name)")
        write(gen_file, "        if r_class:")
        write(gen_file, "            r_class.http_get(id)")
        write(gen_file, "")
        write(gen_file, "        db_conn = self._db_conn")
        write(gen_file, "        if etag:")
        write(gen_file, "            obj_ids = {'uuid': id}")
        write(gen_file, "            (ok, result) = db_conn.dbe_is_latest(obj_ids, etag.replace('\"', ''))")
        write(gen_file, "            if not ok:")
        write(gen_file, "                # Not present in DB")
        write(gen_file, "                self.config_object_error(id, None, method_name, 'http_get', result)")
        write(gen_file, "                abort(404, result)")
        write(gen_file, "")
        write(gen_file, "            is_latest = result")
        write(gen_file, "            if is_latest:")
        write(gen_file, "                # send Not-Modified, caches use this for read optimization")
        write(gen_file, "                response.status = 304")
        write(gen_file, "                return")
        write(gen_file, "        #end if etag")
        write(gen_file, "")
        write(gen_file, "        obj_ids = {'uuid': id}")
        write(gen_file, "")
        write(gen_file, "        # Generate field list for db layer")
        write(gen_file, "        if 'fields' in request.query:")
        write(gen_file, "            obj_fields = request.query.fields.split(',')")
        write(gen_file, "        else: # default props + children + refs + backrefs")
        write(gen_file, "            obj_fields = properties + references")
        write(gen_file, "            if 'exclude_back_refs' not in request.query:")
        write(gen_file, "                obj_fields = obj_fields + back_references")
        write(gen_file, "            if 'exclude_children' not in request.query:")
        write(gen_file, "                obj_fields = obj_fields + children")
        write(gen_file, "")
        write(gen_file, "        try:")
        write(gen_file, "            (ok, result) = db_conn.dbe_read(ident_name, obj_ids, obj_fields)")
        write(gen_file, "            if not ok:")
        write(gen_file, "                self.config_object_error(id, None, method_name, 'http_get', result)")
        write(gen_file, "        except NoIdError as e:")
        write(gen_file, "            # Not present in DB")
        write(gen_file, "            abort(404, str(e))")
        write(gen_file, "        if not ok:")
        write(gen_file, "            abort(500, result)")
        write(gen_file, "")
        write(gen_file, "        # check visibility")
        write(gen_file, "        if (not result['id_perms'].get('user_visible', True) and")
        write(gen_file, "            not self.is_admin_request()):")
        write(gen_file, "            result = 'This object is not visible by users: %s' % id")
        write(gen_file, "            self.config_object_error(id, None, method_name, 'http_get', result)")
        write(gen_file, "            abort(404, result)")
        write(gen_file, "")
        write(gen_file, "        rsp_body = {}")
        write(gen_file, "        rsp_body['uuid'] = id")
        write(gen_file, "        rsp_body['href'] = self.generate_url(ident_name, id)")
        write(gen_file, "        rsp_body['name'] = result['fq_name'][-1]")
        write(gen_file, "        rsp_body.update(result)")
        write(gen_file, "        id_perms = result['id_perms']")
        write(gen_file, "        response.set_header('ETag', '\"' + id_perms['last_modified'] + '\"')")
        write(gen_file, "        try:")
        write(gen_file, "            self._extension_mgrs['resourceApi'].map_method('post_%s_read' % method_name, id, rsp_body)")
        write(gen_file, "        except Exception as e:")
        write(gen_file, "            pass")
        write(gen_file, "")
        write(gen_file, "        return {ident_name: rsp_body} ")
        write(gen_file, "")

    def _generate_http_get(self, gen_file, method_name, ident):

        ident_name = ident.getName()

        prop_fields = [prop.getName().replace('-', '_') for prop in ident.getProperties()]
        ref_fields = ['%s_refs' %(ref_ident.getName().replace('-', '_')) for ref_ident in ident.getReferences()]
        back_ref_fields = ['%s_back_refs' %(back_ref_ident.getName().replace('-', '_')) for back_ref_ident in ident.getBackReferences()]
        children_fields = ['%ss' %(child_ident.getName().replace('-', '_')) for child_ident in ident.getChildren()]

        write(gen_file, "    def %s_http_get(self, id):" %(method_name))
        write(gen_file, "        method_name = '%s'" % (method_name))
        write(gen_file, "        ident_name = '%s'" % (ident_name))
        write(gen_file, "        properties = %s" %(prop_fields))
        write(gen_file, "        references = %s" %(ref_fields))
        write(gen_file, "        back_references = %s" %(back_ref_fields))
        write(gen_file, "        children = %s" %(children_fields))
        write(gen_file, "        return self._meta_http_get(id, method_name, ident_name, properties, references, back_references, children)")
        write(gen_file, "")

    def _generate_db_post(self, gen_file, method_name, ident):

        ident_name = ident.getName()
        parents = ident.getParents()

        # POST on collection
        write(gen_file, "    def %ss_db_post(self, context, body):" %(method_name))
        write(gen_file, "        key = '%s'" %(ident_name))
        write(gen_file, "        obj_dict = body")
        write(gen_file, "        (ok, result) = self._post_validate(key, obj_dict=obj_dict)")
        write(gen_file, "        if not ok:")
        write(gen_file, "            return ok, result")
        write(gen_file, "")
        write(gen_file, "        fq_name = obj_dict['fq_name']")
        write(gen_file, "")
        write(gen_file, "        try:")
        write(gen_file, "            self._extension_mgrs['resourceApi'].map_method('pre_%s_create', obj_dict)" %(method_name))
        write(gen_file, "        except Exception as e:")
        write(gen_file, "            pass")
        write(gen_file, "")
        self._add_validate(gen_file, ident)
        write(gen_file, "        # common handling for all resource create")
        write(gen_file, "        (ok, result) = self._db_post_common(body, '%s', obj_dict)" %(ident_name))
        write(gen_file, "        if not ok:")
        write(gen_file, "            return ok, result")
        write(gen_file, "")
        write(gen_file, "        name = obj_dict['fq_name'][-1]")
        write(gen_file, "        fq_name = obj_dict['fq_name']")
        # TODO if fq_name exists already in cassandra, abort with 409
        write(gen_file, "")
        write(gen_file, "        db_conn = self._db_conn")
        write(gen_file, "")
        if parents:
            write(gen_file, "        # if client gave parent_type of config-root, ignore and remove")
            write(gen_file, "        if 'parent_type' in obj_dict and obj_dict['parent_type'] == '%s':" %(_BASE_PARENT))
            write(gen_file, "            del obj_dict['parent_type']")
            write(gen_file, "")
            write(gen_file, "        if 'parent_type' in obj_dict:")
            write(gen_file, "            # non config-root child, verify parent exists")
            write(gen_file, "            parent_type = obj_dict['parent_type']")
            write(gen_file, "            parent_fq_name = obj_dict['fq_name'][:-1]")
            write(gen_file, "            try:")
            write(gen_file, "                parent_uuid = self._db_conn.fq_name_to_uuid(parent_type, parent_fq_name)")
            write(gen_file, "                (ok, status) = self._permissions.check_perms_write(context, parent_uuid)")
            write(gen_file, "                if not ok:")
            write(gen_file, "                    return ok, status")
            write(gen_file, "                self._permissions.set_user_role(context, obj_dict)")
            write(gen_file, "            except NoIdError:")
            write(gen_file, "                err_msg = 'Parent ' + pformat(parent_fq_name) + ' type ' + parent_type + ' does not exist'")
            write(gen_file, "                fq_name_str = ':'.join(parent_fq_name)")
            write(gen_file, "                self.config_object_error(None, fq_name_str, '%s', 'http_post', err_msg)" % (method_name))
            write(gen_file, "                return (False, (400, err_msg))")
            write(gen_file, "")
        ref_list = [ident.getLinkTo(link_info).getName().replace('-', '_') for link_info in ident.getLinksInfo()]
        if ref_list:
            write(gen_file, "        # Validate perms")
            write(gen_file, "        objtype_list = %s" % ref_list)
            write(gen_file, "        for obj_type in objtype_list:")
            write(gen_file, "            refs = obj_dict.get('%s_refs'%(obj_type), None)")
            write(gen_file, "            if refs:")
            write(gen_file, "                for ref in refs:")
            write(gen_file, "                    ref_uuid = db_conn.fq_name_to_uuid(obj_type, ref['to'])")
            write(gen_file, "                    (ok, status) = self._permissions.check_perms_link(context, ref_uuid)")
            write(gen_file, "                    if not ok:")
            write(gen_file, "                        return ok, status")
        write(gen_file, "")
        write(gen_file, "        # State modification starts from here. Ensure that cleanup is done for all state changes")
        write(gen_file, "        cleanup_on_failure = []")
        write(gen_file, "        # Alloc and Store id-mappings before creating entry on pubsub store.")
        write(gen_file, "        # Else a subscriber can ask for an id mapping before we have stored it")
        write(gen_file, "        uuid_requested = result")
        write(gen_file, "        (ok, result) = db_conn.dbe_alloc('%s', obj_dict, uuid_requested)" %(ident_name))
        write(gen_file, "        if not ok:")
        write(gen_file, "            (code, msg) = result")
        write(gen_file, "            fq_name_str = ':'.join(obj_dict['fq_name'])")
        write(gen_file, "            self.config_object_error(None, fq_name_str, '%s', 'http_post', result)" % (method_name))
        write(gen_file, "            return ok, result")
        write(gen_file, "        cleanup_on_failure.append((db_conn.dbe_release, ['%s', fq_name]))" % (method_name))
        write(gen_file, "")
        write(gen_file, "        obj_ids = result")
        write(gen_file, "")
        write(gen_file, "        tenant_name = context.tenant_name")
        write(gen_file, "")
        write(gen_file, "        # type-specific hook")
        write(gen_file, "        r_class = self.get_resource_class('%s')" %(ident_name))
        write(gen_file, "        if r_class:")
        write(gen_file, "            try:")
        write(gen_file, "                (ok, result) = r_class.http_post_collection(tenant_name, obj_dict, db_conn)")
        write(gen_file, "            except Exception as e:")
        write(gen_file, "                ok = False")
        write(gen_file, "                result = (500, str(e))")
        write(gen_file, "            if not ok:")
        write(gen_file, "                for fail_cleanup_callable, cleanup_args in cleanup_on_failure:")
        write(gen_file, "                    fail_cleanup_callable(*cleanup_args)")
        write(gen_file, "                (code, msg) = result")
        write(gen_file, "                fq_name_str = ':'.join(fq_name)")
        write(gen_file, "                self.config_object_error(None, fq_name_str, '%s', 'http_post', msg)" % (method_name))
        write(gen_file, "                return (False, (code, msg))")
        write(gen_file, "        callable = getattr(r_class, 'http_post_collection_fail', None)")
        write(gen_file, "        if callable:")
        write(gen_file, "            cleanup_on_failure.append((callable, [tenant_name, obj_dict, db_conn]))")
        write(gen_file, "")
        write(gen_file, "        try:")
        write(gen_file, "            (ok, result) = \\")
        write(gen_file, "                 db_conn.dbe_create('%s', obj_ids, obj_dict)" %(ident_name))
        write(gen_file, "        except Exception as e:")
        write(gen_file, "            ok = False")
        write(gen_file, "            result = str(e)")
        write(gen_file, "")
        write(gen_file, "        if not ok:")
        write(gen_file, "            for fail_cleanup_callable, cleanup_args in cleanup_on_failure:")
        write(gen_file, "                fail_cleanup_callable(*cleanup_args)")
        write(gen_file, "            fq_name_str = ':'.join(fq_name)")
        write(gen_file, "            self.config_object_error(None, fq_name_str, '%s', 'http_post', result)" % (method_name))
        write(gen_file, "            return (False, (404, result))")
        write(gen_file, "")
        write(gen_file, "        rsp_body = {}")
        write(gen_file, "        rsp_body['name'] = name")
        write(gen_file, "        rsp_body['fq_name'] = fq_name")
        write(gen_file, "        rsp_body['uuid'] = obj_ids['uuid']")
        write(gen_file, "        rsp_body['href'] = self.generate_url('%s', obj_ids['uuid'])" %(ident_name))
        if parents:
            write(gen_file, "        if 'parent_type' in obj_dict:")
            write(gen_file, "            # non config-root child, send back parent uuid/href")
            write(gen_file, "            rsp_body['parent_uuid'] = parent_uuid")
            write(gen_file, "            rsp_body['parent_href'] = self.generate_url(parent_type, parent_uuid)")
        write(gen_file, "")
        write(gen_file, "        try:")
        write(gen_file, "            self._extension_mgrs['resourceApi'].map_method('post_%s_create', obj_dict)" %(method_name))
        write(gen_file, "        except Exception as e:")
        write(gen_file, "            pass")
        write(gen_file, "")
        # TODO return type-specific contents in rsp_body
        write(gen_file, "        return True, {'%s': rsp_body} " %(ident_name))
        write(gen_file, "")

    def _generate_http_post(self, gen_file, method_name, ident):

        ident_name = ident.getName()

        write(gen_file, "    def %ss_http_post(self):" %(method_name))
        write(gen_file, "        key = '%s'" %(ident_name))
        write(gen_file, "        obj_dict = request.json[key]")
        write(gen_file, "        (ok, result) = self._post_validate(key, obj_dict=obj_dict)")
        write(gen_file, "        if not ok:")
        write(gen_file, "            (code, msg) = result")
        write(gen_file, "            abort(code, msg)")
        write(gen_file, "        context = VncRequestContext.from_request(request)")
        write(gen_file, "        ok, result = self.%ss_db_post(context, obj_dict)" %(method_name))
        write(gen_file, "        if not ok:")
        write(gen_file, "            (code, msg) = result")
        write(gen_file, "            fq_name_str = ':'.join(obj_dict.get('fq_name', []))")
        write(gen_file, "            self.config_object_error(None, fq_name_str, '%s', 'http_post', msg)" % (method_name))
        write(gen_file, "            abort(code, msg)")
        write(gen_file, "        return result")
        write(gen_file, "")

    def _generate_db_put(self, gen_file, method_name, ident):

        ident_name = ident.getName()
 
        write(gen_file, "    def %s_db_put(self, context, id, body):" %(method_name))
        write(gen_file, "        obj_dict = body")
	write(gen_file, "")
	write(gen_file, "        try:")
	write(gen_file, "            self._extension_mgrs['resourceApi'].map_method('pre_%s_update', id, obj_dict)" %(method_name))
	write(gen_file, "        except Exception as e:")
	write(gen_file, "            pass")
	write(gen_file, "")
	write(gen_file, "        db_conn = self._db_conn")
	write(gen_file, "        try:")
	write(gen_file, "            obj_type = db_conn.uuid_to_obj_type(id)")
	write(gen_file, "            if obj_type != '%s':" %(method_name))
	write(gen_file, "                abort(404, 'No %s object found for id %%s' %%(id))" %(ident_name))
	write(gen_file, "            fq_name = db_conn.uuid_to_fq_name(id)")
	write(gen_file, "        except NoIdError as e:")
	write(gen_file, "            return False, (404, str(e))")

        self._add_validate(gen_file, ident)
	write(gen_file, "        # common handling for all resource put")
	write(gen_file, "        (ok, result) = self._put_common(context, '%s', id, fq_name, obj_dict)" % (method_name))
	write(gen_file, "        if not ok:")
	write(gen_file, "            (code, msg) = result")
	write(gen_file, "            self.config_object_error(id, None, '%s', 'http_put', msg)" % (method_name))
	write(gen_file, "            return False, (code, msg)")
	write(gen_file, "")
#write(gen_file, "        # last part of url is uuid")
#write(gen_file, "        id = request.path.split('/')[-1]")
	ref_list = [ident.getLinkTo(link_info).getName().replace('-', '_') for link_info in ident.getLinksInfo()]
	if ref_list:
            write(gen_file, "        # Validate perms")
            write(gen_file, "        objtype_list = %s" % ref_list)
            write(gen_file, "        for obj_type in objtype_list:")
            write(gen_file, "            refs = obj_dict.get('%s_refs'%(obj_type), None)")
            write(gen_file, "            if refs:")
            write(gen_file, "                for ref in refs:")
            write(gen_file, "                    try:")
            write(gen_file, "                        ref_uuid = db_conn.fq_name_to_uuid(obj_type, ref['to'])")
            write(gen_file, "                    except NoIdError as e:")
            write(gen_file, "                        return False, (404, str(e))")
            write(gen_file, "                    (ok, status) = self._permissions.check_perms_link(context, ref_uuid)")
            write(gen_file, "                    if not ok:")
            write(gen_file, "                        (code, err_msg) = status")
            write(gen_file, "                        return False, (code, err_msg)")
        write(gen_file, "")
        write(gen_file, "        # State modification starts from here. Ensure that cleanup is done for all state changes")
        write(gen_file, "        cleanup_on_failure = []")
        write(gen_file, "        # type-specific hook")
        write(gen_file, "        r_class = self.get_resource_class('%s')" %(ident_name))
        write(gen_file, "        if r_class:")
        write(gen_file, "            (ok, put_result) = r_class.http_put(id, fq_name, obj_dict, self._db_conn)")
        write(gen_file, "            if not ok:")
        write(gen_file, "                (code, msg) = put_result")
        write(gen_file, "                self.config_object_error(id, None, '%s', 'http_put', msg)" % (method_name))
        write(gen_file, "                return False, (code, msg)")
        write(gen_file, "        callable = getattr(r_class, 'http_put_fail', None)")
        write(gen_file, "        if callable:")
        write(gen_file, "            cleanup_on_failure.append((callable, [id, fq_name, obj_dict, self._db_conn]))")
        write(gen_file, "")
        #write(gen_file, "        ifmap_id = db_conn.uuid_to_ifmap_id(id)")
        #write(gen_file, "        obj_ids = {'uuid': id, 'imid': ifmap_id}")
        write(gen_file, "        obj_ids = {'uuid': id}")
        write(gen_file, "        try:")
        write(gen_file, "            (ok, result) = db_conn.dbe_update('%s', obj_ids, obj_dict)" %(ident_name))
        write(gen_file, "        except Exception as e:")
        write(gen_file, "            ok = False")
        write(gen_file, "            result = str(e)")
        write(gen_file, "        if not ok:")
        write(gen_file, "            for fail_cleanup_callable, cleanup_args in cleanup_on_failure:")
        write(gen_file, "                    fail_cleanup_callable(*cleanup_args)")
        write(gen_file, "            self.config_object_error(id, None, '%s', 'http_put', result)" % (method_name))
        write(gen_file, "            return False, (404, result)")
        write(gen_file, "")
        write(gen_file, "        rsp_body = {}")
        write(gen_file, "        rsp_body['uuid'] = id")
        write(gen_file, "        rsp_body['href'] = self.generate_url('%s', id)" %(ident_name))
        write(gen_file, "")
        write(gen_file, "        try:")
        write(gen_file, "            self._extension_mgrs['resourceApi'].map_method('post_%s_update', id, obj_dict)" %(method_name))
        write(gen_file, "        except Exception as e:")
        write(gen_file, "            pass")
        write(gen_file, "")
        write(gen_file, "        return True, {'%s': rsp_body} " %(ident_name))
        write(gen_file, "    #end %s_http_put" %(method_name))
        write(gen_file, "")

    def _generate_http_put(self, gen_file, method_name, ident):

        ident_name = ident.getName()

        write(gen_file, "    def %s_http_put(self, id):" %(method_name))
        write(gen_file, "        key = '%s'" %(ident_name))
        write(gen_file, "        obj_dict = request.json[key]")
        write(gen_file, "        context = VncRequestContext.from_request(request)")
        write(gen_file, "        ok, result = self.%s_db_put(context, id, obj_dict)" %(method_name))
        write(gen_file, "        if not ok:")
        write(gen_file, "            (code, msg) = result")
        write(gen_file, "            fq_name_str = ':'.join(obj_dict.get('fq_name', []))")
        write(gen_file, "            self.config_object_error(None, fq_name_str, '%s', 'http_put', msg)" % (method_name))
        write(gen_file, "            abort(code, msg)")
        write(gen_file, "        return result")
        write(gen_file, "")

    def _generate_db_delete(self, gen_file, method_name, ident, child_idents, back_idents):

        ident_name = ident.getName()

        write(gen_file, "    def %s_db_delete(self, context, id):" %(method_name))
        write(gen_file, "        db_conn = self._db_conn")
        write(gen_file, "        # if obj doesn't exist return early")
        write(gen_file, "        try:")
        write(gen_file, "            obj_type = db_conn.uuid_to_obj_type(id)")
        write(gen_file, "            if obj_type != '%s':" %(method_name))
        write(gen_file, "                return False, (404, 'No %s object found for id %%s' %%(id))" %(ident_name))
        write(gen_file, "            _ = db_conn.uuid_to_fq_name(id)")
        write(gen_file, "        except NoIdError:")
        write(gen_file, "            return False, (404, 'ID %s does not exist' %(id))")
        write(gen_file, "")
        write(gen_file, "        try:")
        write(gen_file, "            self._extension_mgrs['resourceApi'].map_method('pre_%s_delete', id)" %(method_name))
        write(gen_file, "        except Exception as e:")
        write(gen_file, "            pass")
        write(gen_file, "")
        write(gen_file, "        # read in obj from db (accepting error) to get details of it")
        write(gen_file, "        obj_ids = {'uuid': id}")
        back_ref_fields = ['%s_back_refs' %(back_ref_ident.getName().replace('-', '_')) for back_ref_ident in ident.getBackReferences()]
        children_fields = ['%ss' %(child_ident.getName().replace('-', '_')) for child_ident in ident.getChildren()]
        write(gen_file, "        back_references = %s" %(back_ref_fields))
        write(gen_file, "        children = %s" %(children_fields))
        write(gen_file, "        obj_fields = children + back_references")
        write(gen_file, "        try:")
        write(gen_file, "            (read_ok, read_result) = db_conn.dbe_read('%s', obj_ids, obj_fields)" %(ident_name))
        write(gen_file, "        except NoIdError as e:")
        write(gen_file, "            return False, (404, str(e))")
        write(gen_file, "        except DatabaseUnavailableError as e:")
        write(gen_file, "            return False, (500, 'Error in database access: %s' %(str(e)))")
        write(gen_file, "        if not read_ok:")
        write(gen_file, "            if read_result.startswith('Unknown id:'):")
        write(gen_file, "                return False, (404, 'ID %s does not exist' %(id))")
        write(gen_file, "            else:")
        write(gen_file, "                self.config_object_error(id, None, '%s', 'http_delete', read_result)" % (method_name))
        write(gen_file, "                # proceed down to delete the resource")
        write(gen_file, "")
        write(gen_file, "        # common handling for all resource delete")
        write(gen_file, "        parent_type = read_result.get('parent_type', None)")
        write(gen_file, "        (ok, del_result) = self._delete_common(context, '%s', id, parent_type)" % (method_name))
        write(gen_file, "        if not ok:")
        write(gen_file, "            (code, msg) = del_result")
        write(gen_file, "            self.config_object_error(id, None, '%s', 'http_delete', msg)" % (method_name))
        write(gen_file, "            return False, (code, msg)")
        write(gen_file, "")
        write(gen_file, "        fq_name = read_result['fq_name']")
        write(gen_file, "        ifmap_id = cfgm_common.imid.get_ifmap_id_from_fq_name('%s', fq_name)" %(ident_name))
        write(gen_file, "        obj_ids['imid'] = ifmap_id")
        write(gen_file, "        if parent_type:")
        write(gen_file, "            parent_imid = cfgm_common.imid.get_ifmap_id_from_fq_name(parent_type, fq_name[:-1])")
        write(gen_file, "            obj_ids['parent_imid'] = parent_imid")
        write(gen_file, "")
        write(gen_file, "        # State modification starts from here. Ensure that cleanup is done for all state changes")
        write(gen_file, "        cleanup_on_failure = []")
        write(gen_file, "")
        write(gen_file, "        # type-specific hook")
        write(gen_file, "        r_class = self.get_resource_class('%s')" %(ident_name))
        write(gen_file, "        if r_class:")
        #write(gen_file, "            obj_ids = {'uuid': id, 'imid': ifmap_id}")
        write(gen_file, "            if read_ok:")
        write(gen_file, "                # fail if non-default children or backrefs exist")

        for (child_ident, child_link_info) in child_idents:
            if child_ident.isDerived():
                # if this entity was not produced by user, don't hold it a/c able for delete ref
                continue

            child_method = child_ident.getName().replace('-', '_')
            child_default_name = child_ident.getDefaultFQName(parent_type = ident_name)[-1]
            write(gen_file, "                %ss = read_result.get('%ss', None)" %(child_method, child_method))
            write(gen_file, "                if %ss:" %(child_method))
            write(gen_file, "                    has_infos = read_result['%ss']" %(child_method))
            write(gen_file, "                    if ((len(has_infos) > 1) or ")
            write(gen_file, "                        (len(has_infos) == 1 and has_infos[0]['to'][-1] != '%s')):" %(child_default_name))
            write(gen_file, "                        has_urls = [has_info['href'] for has_info in has_infos]")
            write(gen_file, "                        has_str = ', '.join(has_urls)")
            write(gen_file, "                        err_msg = 'Children ' + has_str + ' still exist'")
            write(gen_file, "                        self.config_object_error(id, None, '%s', 'http_delete', err_msg)" % (method_name))
            write(gen_file, "                        return False, (409, err_msg)")
            write(gen_file, "")

        for (back_ident, back_link_info) in back_idents:
            if back_ident.isLinkDerived(back_link_info):
                # if this entity was not produced by user, don't hold it a/c able for delete ref
                continue

            back_method = back_ident.getName().replace('-', '_')
            write(gen_file, "                %s_back_refs = read_result.get('%s_back_refs', None)" %(back_method, back_method))
            write(gen_file, "                if %s_back_refs:" %(back_method))
            write(gen_file, "                    back_ref_urls = [back_ref_info['href'] for back_ref_info in read_result['%s_back_refs']]" \
                                                                                                                      %(back_method))
            write(gen_file, "                    back_ref_str = ', '.join(back_ref_urls)")
            write(gen_file, "                    err_msg = 'Back-References from ' + back_ref_str + ' still exist'")
            write(gen_file, "                    self.config_object_error(id, None, '%s', 'http_delete', err_msg)" % (method_name))
            write(gen_file, "                    return False, (409, err_msg)")
            write(gen_file, "")

        write(gen_file, "")
        write(gen_file, "                # Delete default children first")
        write(gen_file, "                self._%s_delete_default_children(read_result)" %(method_name))
        write(gen_file, "")
        write(gen_file, "                (ok, del_result) = r_class.http_delete(id, read_result, db_conn)")
        write(gen_file, "                if not ok:")
        write(gen_file, "                    (code, msg) = del_result")
        write(gen_file, "                    self.config_object_error(id, None, '%s', 'http_delete', msg)" % (method_name))
        write(gen_file, "                    return False, (code, msg)")
        write(gen_file, "                callable = getattr(r_class, 'http_delete_fail', None)")
        write(gen_file, "                if callable:")
        write(gen_file, "                    cleanup_on_failure.append((callable, [id, read_result, db_conn]))")
        write(gen_file, "            #end if read_ok")
        write(gen_file, "")
        write(gen_file, "        try:")
        write(gen_file, "            (ok, del_result) = db_conn.dbe_delete('%s', obj_ids, read_result)" %(ident_name))
        write(gen_file, "        except Exception as e:")
        write(gen_file, "            ok = False")
        write(gen_file, "            del_result = str(e)")
        write(gen_file, "        if not ok:")
        write(gen_file, "            for fail_cleanup_callable, cleanup_args in cleanup_on_failure:")
        write(gen_file, "                    fail_cleanup_callable(*cleanup_args)")
        write(gen_file, "            self.config_object_error(id, None, '%s', 'http_delete', del_result)" % (method_name))
        write(gen_file, "            return False, (409, del_result)")
        write(gen_file, "")
        write(gen_file, "        try:")
        write(gen_file, "            self._extension_mgrs['resourceApi'].map_method('post_%s_delete', id, read_result)" %(method_name))
        write(gen_file, "        except Exception as e:")
        write(gen_file, "            pass")
        write(gen_file, "")
        write(gen_file, "        return True, 'deleted'")
        write(gen_file, "")

    def _generate_http_delete(self, gen_file, method_name, ident):

        ident_name = ident.getName()

        write(gen_file, "    def %s_http_delete(self, id):" %(method_name))
        write(gen_file, "        context = VncRequestContext.from_request(request)")
        write(gen_file, "        ok, result = self.%s_db_delete(context, id)" %(method_name))
        write(gen_file, "        if not ok:")
        write(gen_file, "            (code, msg) = result")
        write(gen_file, "            fq_name_str = ':'.join(obj_dict.get('fq_name', []))")
        write(gen_file, "            self.config_object_error(None, fq_name_str, '%s', 'http_delete', msg)" % (method_name))
        write(gen_file, "            abort(code, msg)")
        write(gen_file, "        return result")
        write(gen_file, "")
